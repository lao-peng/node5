/*
服务器开启阶段做的事情:  

 1. 在命令行窗口中执行nodemon app.js 
 2. 执行app.js中的代码
 3. 执行const db = require('./database/db'),所以代码会进入到db/index.js中执行, 去连接数据库,导出连接数据库的promise实例. db代表的就是promise
 4. 引入express 
 5. const { createUser } = require('./database/crud/register') 代码进入到regiser.js中执行,
 6. 进入register中执行,由于第一行代码引入了model.所以又进入到model/index.js中执行(此时register.js还没有执行完毕)
 7. 在model/index.js中,创建了约束对象和集合对象,并且导出了集合对象. 这个文件执行完毕之后,继续会到register.js中执行后面的代码
 8. 回到register.js中执行代码, 引入了md5加密, 定义了一个往数据库中添加用户的函数,但是函数此时没有调用. 最终导出了createUser函数
 9.  const { findUser } = require('./database/crud/login') 又进入到login.js中执行
 10. 进入login.js中,又引入了model,但是由于之前在其他模块已经引入过一次,所以内存中已经参加了model.所以这次引入,不会重新执行model/index.js中的代码了,而是直接将内存中的model对象,赋值给login.js中的model常量
 11. 定义了一个从数据库中查找数据的函数,并且导出这个函数
 12. await db 等待连接数据库的promise成功,成功之后,才会执行后面的代码
 13. 创建express应用对象, 利用中间件处理静态资源(所以跟前端相关的代码,都放在public文件夹下面. 后面访问的时候,要求在浏览器的地址栏中输入对应的请求地址访问)
 14. 处理了post请求上传数据
 15. 由于当前代码使用了后端渲染.随意app.set()两句话,是为了配置后端渲染的模板引擎和对应模板所处的文件夹的路径
 16. 定义了两个路由. 一个用于处理注册的逻辑. 一个用来处理登录的逻辑
 17. 开启服务器


 用户访问页面阶段: 

1. 用户在浏览器的地址栏中输入 http://127.0.0.1:5000/views/register.html然后按下回车键. 这时浏览器会按照这个地址,给我们的服务器发送请求, 服务器中处理这个请求的是处理静态资源的中间件.这个中间件,找到对应的html文件,直接响应给浏览器
2. 用户浏览器就可以看到注册页面展示出来
3. 用户输入要注册的用户名和密码以及确认密码. 表单校验完成之后,点击注册按钮,会再次进行一次表单校验. 再次校验完毕之后,发送了一个请求 这个请求是post请求. 然后请求地址是http://127.0.0.1:5000/register.目的是为了将用户上传的用户名和密码,存储到数据库中
4. 所以app.post('/regiser')这个路由的回调会触发了, 在回调中,先接受了用户上传的用户名和密码,然后调用createUser函数
5. 代码进入到createUser函数中执行,调用了model.create方法,将用户名和加密之后的密码存储到了数据库中.存储过程是一个异步过程.所以,调用了model.create函数之后,createUser这个函数就立刻执行完毕了,并返回了一个promise对象
6. await createUser(....) 要等到往数据库中添加用户信息成功之后,后面的代码才会执行. 当成功之后,服务器响应给浏览器,让浏览器重定向到http://127.0.0.1:5000/views/login.html这里
7. 浏览器就接收到了服务器的响应信息, 在响应信息中得知需要给http://127.0.0.1:5000/views/login.html这个地址重新发送请求,则修改地址栏,然后自动发送请求
8. 请求login.html页面发送到服务器之后,服务器处理静态资源的中间件,将对应login.html页面响应给浏览器,浏览器直接渲染

9. 用户在登录页面中输入用户名和密码,表单校验通过之后,点击登录按钮,将表单的信息,以post请求的方式,发送给http://127.0.0.1:5000/login这个地址

10. 当请求发出之后,服务器中对应的app.post('/login') 这个路由的回调函数处理了这次请求

11. 获取用户上传的数据,然后调用findUser函数,这时代码进入到login.js中,执行findUser函数体中拿到代码,findUser函数体中调用了model.findOne方法,并且返回操作数据库的promise对象

12. 当获取数据成功之后,promise变成成功的状态,后面的代码就会执行

13. 判断,是否根据用户名和密码找到了指定用户,如果没找到,直接响应给用户,用户名或密码错误

14. 如果找到了.user变量存储的就是当前用户信息的一个对象. 然后调用了render函数

15. 调用了render函数,express就会根据传入的render中的模板名称,去指定路径下去找home.ejs. 找到之后,将数据和模板一起进行处理,会根据ejs的语法,将数据和模板最终生成一个渲染好数据的html文件. 最终将渲染好的html,响应给浏览器

16. 浏览器接收到服务器响应的渲染好的html,直接展示


















*/
